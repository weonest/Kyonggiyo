name: 경기요 CD

on:
  push:
    branches:
      - dev
      - main

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v3

      - name: 환경변수 파일 생성
        run: echo "${{ secrets.ENV_PROPERTIES }}" > .env
      
      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gralde 캐싱
        id: gradle-cache
        uses: actions/cache@v3
        with: 
         path: |
           ~/.gradle/caches
           ~/.gradle/wrapper
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
         restore-keys: |
            ${{ runner.os }}-gradle-
            
      - if: steps.gradle-cache.outputs.cache-hit == 'true'
        run: echo 'gradle cache hit!'
      - if: steps.gradle-cache.outputs.cache-hit != 'true'
        run: echo 'gradle cache missed!'

      - name: Gradle 권한 부여
        run: chmod +x gradlew
        
      - name: Gradle 테스트 제외 빌드
        run: ./gradlew clean build -x test

      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          echo 'Docker Login Succeeded!!'
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROD_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROD_REPO }}

      - name: Docker build & push to dev
        if: contains(github.ref, 'dev')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          echo 'Docker Login Succeeded!!'
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_REPO }}

      - name: 환경 변수 파일을 서버로 전송
        uses: appleboy/scp-action@master
        with:
          username: ubuntu
          host: ${{ secrets.HOST }}
          key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
          source: ".env"
          target: "/home/ubuntu"

      - name: 운영환경 배포
        uses: appleboy/ssh-action@v1.0.0
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
          script: |
            sudo docker ps
            sudo docker stop prod
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROD_REPO }}
            sudo docker run -d --env-file .env -p 8081:8080 --name prod ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_REPO }}
            sudo docker image prune -f

      - name: 개발환경 배포
        uses: appleboy/ssh-action@v1.0.0
        id: deploy-dev
        if: contains(github.ref, 'dev')
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
          script: |
            sudo docker ps
            sudo docker stop dev
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_REPO }}
            sudo docker run -d --env-file .env -p 8082:8080 --name dev ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_REPO }}
            sudo docker image prune -f
